@property --p{
    syntax: '<number>';
    inherits: true;
    initial-value: 0;
  }
  
  .pie {
    --p:20;
    --b:22px;
    --c:darkred;
    --w:150px;
    
    width:var(--w);
    aspect-ratio:1;
    position:relative;
    display:inline-grid;
    margin:5px;
    place-content:center;
    font-size:25px;
    font-weight:bold;
    font-family:sans-serif;
  }
  .pie:before,
  .pie:after {
    content:"";
    position:absolute;
    border-radius:50%;
  }
  .pie:before {
    inset:0;
    background:
      radial-gradient(farthest-side,var(--c) 98%,#0000) top/var(--b) var(--b) no-repeat,
      conic-gradient(var(--c) calc(var(--p)*1%),#0000 0);
    -webkit-mask:radial-gradient(farthest-side,#0000 calc(99% - var(--b)),#000 calc(100% - var(--b)));
            mask:radial-gradient(farthest-side,#0000 calc(99% - var(--b)),#000 calc(100% - var(--b)));
  }
  .pie:after {
    inset:calc(50% - var(--b)/2);
    background:var(--c);
    transform:rotate(calc(var(--p)*3.6deg)) translateY(calc(50% - var(--w)/2));
  }
  .animate {
    animation:p 1s .5s both;
  }
  .no-round:before {
    background-size:0 0,auto;
  }
  .no-round:after {
    content:none;
  }
  @keyframes p {
    from{--p:0}
  }
  
  @import url(https://fonts.googleapis.com/css?family=Expletus+Sans);

  /* Styling an indeterminate progress bar */
  
  progress:not(value) {
    /* Add your styles here. As part of this walkthrough we will focus only on determinate progress bars. */
  }
  
  /* Styling the determinate progress element */
  
  progress[value] {
    /* Get rid of the default appearance */
    appearance: none;
    
    /* This unfortunately leaves a trail of border behind in Firefox and Opera. We can remove that by setting the border to none. */
    border: none;
    
    /* Add dimensions */
    width: 100%; height: 20px;
    
    /* Although firefox doesn't provide any additional pseudo class to style the progress element container, any style applied here works on the container. */
      background-color: whiteSmoke;
      border-radius: 3px;
      box-shadow: 0 2px 3px rgba(0,0,0,.5) inset;
  
    color: royalblue;
    
    position: relative;
    margin: 0 0 1.5em; 
  }
  
  
  progress[value]::-webkit-progress-bar {
    background-color: whiteSmoke;
    border-radius: 3px;
    box-shadow: 0 2px 3px rgba(0,0,0,.5) inset;
  }
  
  progress[value]::-webkit-progress-value {
    position: relative;
    
    background-size: 35px 20px, 100% 100%, 100% 100%;
    border-radius:3px;
    
    /* Let's animate this */
    animation: animate-stripes 5s linear infinite;
  }
  
  @keyframes animate-stripes { 100% { background-position: -100px 0; } }
  
  /* Let's spice up things little bit by using pseudo elements. */
  
  progress[value]::-webkit-progress-value:after {
    /* Only webkit/blink browsers understand pseudo elements on pseudo classes. A rare phenomenon! */
    content: '';
    position: absolute;
    
    width:5px; height:5px;
    top:7px; right:7px;
    
    background-color: white;
    border-radius: 100%;
  }
  
  /* Firefox provides a single pseudo class to style the progress element value and not for container. -moz-progress-bar */
  
  progress[value]::-moz-progress-bar {
    /* Gradient background with Stripes */
    background-image:
    -moz-linear-gradient( 135deg,
                             transparent,
                             transparent 33%,
                             rgba(0,0,0,.1) 33%,
                             rgba(0,0,0,.1) 66%,
                             transparent 66%),
      -moz-linear-gradient( top,
                              rgba(255, 255, 255, .25),
                              rgba(0,0,0,.2)),
       -moz-linear-gradient( left, #09c, #f44);
    
    background-size: 35px 20px, 100% 100%, 100% 100%;
    border-radius:3px;
    
    /* Firefox doesn't support CSS3 keyframe animations on progress element. Hence, we did not include animate-stripes in this code block */
  }
  
  /* Fallback technique styles */
  .progress-bar {
    background-color: whiteSmoke;
    border-radius: 3px;
    box-shadow: 0 2px 3px rgba(0,0,0,.5) inset;
  
    /* Dimensions should be similar to the parent progress element. */
    width: 100%; height:20px;
  }
  
  .progress-bar span {
    background-color: royalblue;
    border-radius: 3px;
    
    display: block;
    text-indent: -9999px;
  }
  
  p[data-value] { 
    
    position: relative; 
  }
  
  /* The percentage will automatically fall in place as soon as we make the width fluid. Now making widths fluid. */
  
  p[data-value]:after {
    content: attr(data-value) '%';
    position: absolute; right:0;
  }
  
  .html5::-webkit-progress-value {
    background-image:
    -webkit-linear-gradient( 135deg,
                             transparent,
                             transparent 33%,
                             rgba(0,0,0,.1) 33%,
                             rgba(0,0,0,.1) 66%,
                             transparent 66%),
      -webkit-linear-gradient( top,
                              rgba(255, 255, 255, .25),
                              rgba(0,0,0,.2)),
       -webkit-linear-gradient( left, rgb(81, 87, 88), rgb(255, 255, 255));
  }
  
  .html5::-moz-progress-bar{
    /* Gradient background with Stripes */
    background-image:
    -moz-linear-gradient( 135deg,
                             transparent,
                             transparent 33%,
                             rgba(0,0,0,.1) 33%,
                             rgba(0,0,0,.1) 66%,
                             transparent 66%),
      -moz-linear-gradient( top,
                              rgba(255, 255, 255, .25),
                              rgba(0,0,0,.2)),
       -moz-linear-gradient( left, #09c, #f44);
  }
  

  